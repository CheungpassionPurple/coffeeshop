openapi: 3.0.0
info:
  description: "This is a sample server Coffeeshop server. For this sample, you can\
    \ use the api key `special-key` to test the authorization filters."
  license:
    name: Apache-2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  title: OpenAPI Coffeeshop
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
- url: http://coffeeshop.swagger.io/v2
tags:
- description: Everything about your Coffees
  name: coffee
- description: Access to Coffeeshop orders
  name: store
- description: Operations about user
  name: user
paths:
  /coffee:
    post:
      description: ""
      operationId: add_coffee
      requestBody:
        $ref: '#/components/requestBodies/Coffee'
      responses:
        "200":
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Coffee'
            application/json:
              schema:
                $ref: '#/components/schemas/Coffee'
          description: successful operation
        "405":
          description: Invalid input
      security:
      - coffeeshop_auth:
        - write:coffees
        - read:coffees
      summary: Add a new coffee to the store
      tags:
      - coffee
      x-openapi-router-controller: openapi_server.controllers.coffee_controller
    put:
      description: ""
      externalDocs:
        description: API documentation for the updateCoffee operation
        url: http://coffeeshop.swagger.io/v2/doc/updateCoffee
      operationId: update_coffee
      requestBody:
        $ref: '#/components/requestBodies/Coffee'
      responses:
        "200":
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Coffee'
            application/json:
              schema:
                $ref: '#/components/schemas/Coffee'
          description: successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Coffee not found
        "405":
          description: Validation exception
      security:
      - coffeeshop_auth:
        - write:coffees
        - read:coffees
      summary: Update an existing coffee
      tags:
      - coffee
      x-openapi-router-controller: openapi_server.controllers.coffee_controller
  /coffee/findByStatus:
    get:
      description: Multiple status values can be provided with comma separated strings
      operationId: find_coffees_by_status
      parameters:
      - deprecated: true
        description: Status values that need to be considered for filter
        explode: false
        in: query
        name: status
        required: true
        schema:
          items:
            default: available
            enum:
            - available
            - pending
            - sold
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/xml:
              schema:
                items:
                  $ref: '#/components/schemas/Coffee'
                type: array
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Coffee'
                type: array
          description: successful operation
        "400":
          description: Invalid status value
      security:
      - coffeeshop_auth:
        - read:coffees
      summary: Finds Coffees by status
      tags:
      - coffee
      x-openapi-router-controller: openapi_server.controllers.coffee_controller
  /coffee/findByTags:
    get:
      deprecated: true
      description: "Multiple tags can be provided with comma separated strings. Use\
        \ tag1, tag2, tag3 for testing."
      operationId: find_coffees_by_tags
      parameters:
      - description: Tags to filter by
        explode: false
        in: query
        name: tags
        required: true
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/xml:
              schema:
                items:
                  $ref: '#/components/schemas/Coffee'
                type: array
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Coffee'
                type: array
          description: successful operation
        "400":
          description: Invalid tag value
      security:
      - coffeeshop_auth:
        - read:coffees
      summary: Finds Coffees by tags
      tags:
      - coffee
      x-openapi-router-controller: openapi_server.controllers.coffee_controller
  /coffee/{coffeeId}:
    delete:
      description: ""
      operationId: delete_coffee
      parameters:
      - explode: false
        in: header
        name: api_key
        required: false
        schema:
          type: string
        style: simple
      - description: Coffee id to delete
        explode: false
        in: path
        name: coffeeId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "400":
          description: Invalid coffee value
      security:
      - coffeeshop_auth:
        - write:coffees
        - read:coffees
      summary: Deletes a coffee
      tags:
      - coffee
      x-openapi-router-controller: openapi_server.controllers.coffee_controller
    get:
      description: Returns a single coffee
      operationId: get_coffee_by_id
      parameters:
      - description: ID of coffee to return
        explode: false
        in: path
        name: coffeeId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Coffee'
            application/json:
              schema:
                $ref: '#/components/schemas/Coffee'
          description: successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Coffee not found
      security:
      - api_key: []
      summary: Find coffee by ID
      tags:
      - coffee
      x-openapi-router-controller: openapi_server.controllers.coffee_controller
    post:
      description: ""
      operationId: update_coffee_with_form
      parameters:
      - description: ID of coffee that needs to be updated
        explode: false
        in: path
        name: coffeeId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/updateCoffeeWithForm_request'
      responses:
        "405":
          description: Invalid input
      security:
      - coffeeshop_auth:
        - write:coffees
        - read:coffees
      summary: Updates a coffee in the store with form data
      tags:
      - coffee
      x-openapi-router-controller: openapi_server.controllers.coffee_controller
  /coffee/{coffeeId}/uploadImage:
    post:
      description: ""
      operationId: upload_file
      parameters:
      - description: ID of coffee to update
        explode: false
        in: path
        name: coffeeId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/uploadFile_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: successful operation
      security:
      - coffeeshop_auth:
        - write:coffees
        - read:coffees
      summary: uploads an image
      tags:
      - coffee
      x-openapi-router-controller: openapi_server.controllers.coffee_controller
  /store/inventory:
    get:
      description: Returns a map of status codes to quantities
      operationId: get_inventory
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  format: int32
                  type: integer
                type: object
          description: successful operation
      security:
      - api_key: []
      summary: Returns coffee inventories by status
      tags:
      - store
      x-openapi-router-controller: openapi_server.controllers.store_controller
  /store/order:
    post:
      description: ""
      operationId: place_order
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
        description: order placed for purchasing the coffee
        required: true
      responses:
        "200":
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: successful operation
        "400":
          description: Invalid Order
      summary: Place an order for a coffee
      tags:
      - store
      x-openapi-router-controller: openapi_server.controllers.store_controller
  /store/order/{orderId}:
    delete:
      description: For valid response try integer IDs with value < 1000. Anything
        above 1000 or nonintegers will generate API errors
      operationId: delete_order
      parameters:
      - description: ID of the order that needs to be deleted
        explode: false
        in: path
        name: orderId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found
      summary: Delete purchase order by ID
      tags:
      - store
      x-openapi-router-controller: openapi_server.controllers.store_controller
    get:
      description: For valid response try integer IDs with value <= 5 or > 10. Other
        values will generate exceptions
      operationId: get_order_by_id
      parameters:
      - description: ID of coffee that needs to be fetched
        explode: false
        in: path
        name: orderId
        required: true
        schema:
          format: int64
          maximum: 5
          minimum: 1
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found
      summary: Find purchase order by ID
      tags:
      - store
      x-openapi-router-controller: openapi_server.controllers.store_controller
  /user:
    post:
      description: This can only be done by the logged in user.
      operationId: create_user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Created user object
        required: true
      responses:
        default:
          description: successful operation
      security:
      - api_key: []
      summary: Create user
      tags:
      - user
      x-openapi-router-controller: openapi_server.controllers.user_controller
  /user/createWithArray:
    post:
      description: ""
      operationId: create_users_with_array_input
      requestBody:
        $ref: '#/components/requestBodies/UserArray'
      responses:
        default:
          description: successful operation
      security:
      - api_key: []
      summary: Creates list of users with given input array
      tags:
      - user
      x-openapi-router-controller: openapi_server.controllers.user_controller
  /user/createWithList:
    post:
      description: ""
      operationId: create_users_with_list_input
      requestBody:
        $ref: '#/components/requestBodies/UserArray'
      responses:
        default:
          description: successful operation
      security:
      - api_key: []
      summary: Creates list of users with given input array
      tags:
      - user
      x-openapi-router-controller: openapi_server.controllers.user_controller
  /user/login:
    get:
      description: ""
      operationId: login_user
      parameters:
      - description: The user name for login
        explode: true
        in: query
        name: username
        required: true
        schema:
          pattern: "^[a-zA-Z0-9]+[a-zA-Z0-9\\.\\-_]*[a-zA-Z0-9]+$"
          type: string
        style: form
      - description: The password for login in clear text
        explode: true
        in: query
        name: password
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
          description: successful operation
          headers:
            Set-Cookie:
              description: Cookie authentication key for use with the `api_key` apiKey
                authentication.
              explode: false
              schema:
                example: AUTH_KEY=abcde12345; Path=/; HttpOnly
                type: string
              style: simple
            X-Rate-Limit:
              description: calls per hour allowed by the user
              explode: false
              schema:
                format: int32
                type: integer
              style: simple
            X-Expires-After:
              description: date in UTC when token expires
              explode: false
              schema:
                format: date-time
                type: string
              style: simple
        "400":
          description: Invalid username/password supplied
      summary: Logs user into the system
      tags:
      - user
      x-openapi-router-controller: openapi_server.controllers.user_controller
  /user/logout:
    get:
      description: ""
      operationId: logout_user
      responses:
        default:
          description: successful operation
      security:
      - api_key: []
      summary: Logs out current logged in user session
      tags:
      - user
      x-openapi-router-controller: openapi_server.controllers.user_controller
  /user/{username}:
    delete:
      description: This can only be done by the logged in user.
      operationId: delete_user
      parameters:
      - description: The name that needs to be deleted
        explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      responses:
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
      security:
      - api_key: []
      summary: Delete user
      tags:
      - user
      x-openapi-router-controller: openapi_server.controllers.user_controller
    get:
      description: ""
      operationId: get_user_by_name
      parameters:
      - description: The name that needs to be fetched. Use user1 for testing.
        explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: successful operation
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
      summary: Get user by user name
      tags:
      - user
      x-openapi-router-controller: openapi_server.controllers.user_controller
    put:
      description: This can only be done by the logged in user.
      operationId: update_user
      parameters:
      - description: name that need to be deleted
        explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Updated user object
        required: true
      responses:
        "400":
          description: Invalid user supplied
        "404":
          description: User not found
      security:
      - api_key: []
      summary: Updated user
      tags:
      - user
      x-openapi-router-controller: openapi_server.controllers.user_controller
components:
  requestBodies:
    UserArray:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/User'
            type: array
      description: List of user object
      required: true
    Coffee:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Coffee'
        application/xml:
          schema:
            $ref: '#/components/schemas/Coffee'
      description: Coffee object that needs to be added to the store
      required: true
  schemas:
    Order:
      description: An order for a coffees from the coffee store
      example:
        quantity: 1
        coffeeId: 6
        id: 0
        shipDate: 2000-01-23T04:56:07.000+00:00
        complete: false
        status: placed
      properties:
        id:
          format: int64
          title: id
          type: integer
        coffeeId:
          format: int64
          title: coffeeId
          type: integer
        quantity:
          format: int32
          title: quantity
          type: integer
        shipDate:
          format: date-time
          title: shipDate
          type: string
        status:
          description: Order Status
          enum:
          - placed
          - approved
          - delivered
          title: status
          type: string
        complete:
          default: false
          title: complete
          type: boolean
      title: Coffee Order
      type: object
      xml:
        name: Order
    Category:
      description: A category for a coffee
      example:
        name: name
        id: 6
      properties:
        id:
          format: int64
          title: id
          type: integer
        name:
          pattern: "^[a-zA-Z0-9]+[a-zA-Z0-9\\.\\-_]*[a-zA-Z0-9]+$"
          title: name
          type: string
      title: Coffee category
      type: object
      xml:
        name: Category
    User:
      description: A User who is purchasing from the coffee store
      example:
        firstName: firstName
        lastName: lastName
        password: password
        userStatus: 6
        phone: phone
        id: 0
        email: email
        username: username
      properties:
        id:
          format: int64
          title: id
          type: integer
        username:
          title: username
          type: string
        firstName:
          title: firstName
          type: string
        lastName:
          title: lastName
          type: string
        email:
          title: email
          type: string
        password:
          title: password
          type: string
        phone:
          title: phone
          type: string
        userStatus:
          description: User Status
          format: int32
          title: userStatus
          type: integer
      title: a User
      type: object
      xml:
        name: User
    Tag:
      description: A tag for a coffee
      example:
        name: name
        id: 1
      properties:
        id:
          format: int64
          title: id
          type: integer
        name:
          title: name
          type: string
      title: Coffee Tag
      type: object
      xml:
        name: Tag
    Coffee:
      description: A coffee for sale in the coffee store
      example:
        photoUrls:
        - photoUrls
        - photoUrls
        name: doggie
        id: 0
        category:
          name: name
          id: 6
        tags:
        - name: name
          id: 1
        - name: name
          id: 1
        status: available
      properties:
        id:
          format: int64
          title: id
          type: integer
        category:
          $ref: '#/components/schemas/Category'
        name:
          example: doggie
          title: name
          type: string
        photoUrls:
          items:
            type: string
          title: photoUrls
          type: array
          xml:
            name: photoUrl
            wrapped: true
        tags:
          items:
            $ref: '#/components/schemas/Tag'
          title: tags
          type: array
          xml:
            name: tag
            wrapped: true
        status:
          deprecated: true
          description: coffee status in the store
          enum:
          - available
          - pending
          - sold
          title: status
          type: string
      required:
      - name
      - photoUrls
      title: a Coffee
      type: object
      xml:
        name: Coffee
    ApiResponse:
      description: Describes the result of uploading an image resource
      example:
        code: 0
        type: type
        message: message
      properties:
        code:
          format: int32
          title: code
          type: integer
        type:
          title: type
          type: string
        message:
          title: message
          type: string
      title: An uploaded response
      type: object
    updateCoffeeWithForm_request:
      properties:
        name:
          description: Updated name of the coffee
          type: string
        status:
          description: Updated status of the coffee
          type: string
      type: object
    uploadFile_request:
      properties:
        additionalMetadata:
          description: Additional data to pass to server
          type: string
        file:
          description: file to upload
          format: binary
          type: string
      type: object
  securitySchemes:
    coffeeshop_auth:
      flows:
        implicit:
          authorizationUrl: http://coffeeshop.swagger.io/api/oauth/dialog
          scopes:
            write:coffees: modify coffees in your account
            read:coffees: read your coffees
      type: oauth2
      x-tokenInfoFunc: openapi_server.controllers.security_controller_.info_from_coffeeshop_auth
      x-scopeValidateFunc: openapi_server.controllers.security_controller_.validate_scope_coffeeshop_auth
    api_key:
      in: header
      name: api_key
      type: apiKey
      x-apikeyInfoFunc: openapi_server.controllers.security_controller_.info_from_api_key
