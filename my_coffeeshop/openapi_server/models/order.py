# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class Order(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, name=None, size=None, temperature=None, milk=None, status=None):  # noqa: E501
        """Order - a model defined in OpenAPI

        :param id: The id of this Order.  # noqa: E501
        :type id: int
        :param name: The name of this Order.  # noqa: E501
        :type name: str
        :param size: The size of this Order.  # noqa: E501
        :type size: str
        :param temperature: The temperature of this Order.  # noqa: E501
        :type temperature: str
        :param milk: The milk of this Order.  # noqa: E501
        :type milk: str
        :param status: The status of this Order.  # noqa: E501
        :type status: str
        """
        self.openapi_types = {
            'id': int,
            'name': str,
            'size': str,
            'temperature': str,
            'milk': str,
            'status': str
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'size': 'size',
            'temperature': 'temperature',
            'milk': 'milk',
            'status': 'status'
        }

        self._id = id
        self._name = name
        self._size = size
        self._temperature = temperature
        self._milk = milk
        self._status = status

    @classmethod
    def from_dict(cls, dikt) -> 'Order':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Order of this Order.  # noqa: E501
        :rtype: Order
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Order.

        A unique ID number that identifies this specific coffee order.  # noqa: E501

        :return: The id of this Order.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Order.

        A unique ID number that identifies this specific coffee order.  # noqa: E501

        :param id: The id of this Order.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Order.

        The name of type of coffee you want to order.  # noqa: E501

        :return: The name of this Order.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Order.

        The name of type of coffee you want to order.  # noqa: E501

        :param name: The name of this Order.
        :type name: str
        """
        allowed_values = ["latte", "espresso", "drip coffee"]  # noqa: E501
        if name not in allowed_values:
            raise ValueError(
                "Invalid value for `name` ({0}), must be one of {1}"
                .format(name, allowed_values)
            )

        self._name = name

    @property
    def size(self):
        """Gets the size of this Order.

        The size of coffee you want to order.  # noqa: E501

        :return: The size of this Order.
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this Order.

        The size of coffee you want to order.  # noqa: E501

        :param size: The size of this Order.
        :type size: str
        """
        allowed_values = ["small", "medium", "large"]  # noqa: E501
        if size not in allowed_values:
            raise ValueError(
                "Invalid value for `size` ({0}), must be one of {1}"
                .format(size, allowed_values)
            )

        self._size = size

    @property
    def temperature(self):
        """Gets the temperature of this Order.

        The temperature of coffee you want to order.  # noqa: E501

        :return: The temperature of this Order.
        :rtype: str
        """
        return self._temperature

    @temperature.setter
    def temperature(self, temperature):
        """Sets the temperature of this Order.

        The temperature of coffee you want to order.  # noqa: E501

        :param temperature: The temperature of this Order.
        :type temperature: str
        """
        allowed_values = ["hot", "cold"]  # noqa: E501
        if temperature not in allowed_values:
            raise ValueError(
                "Invalid value for `temperature` ({0}), must be one of {1}"
                .format(temperature, allowed_values)
            )

        self._temperature = temperature

    @property
    def milk(self):
        """Gets the milk of this Order.

        The type of milk you want to order.  # noqa: E501

        :return: The milk of this Order.
        :rtype: str
        """
        return self._milk

    @milk.setter
    def milk(self, milk):
        """Sets the milk of this Order.

        The type of milk you want to order.  # noqa: E501

        :param milk: The milk of this Order.
        :type milk: str
        """
        allowed_values = ["noMilk", "whole", "oat", "soy"]  # noqa: E501
        if milk not in allowed_values:
            raise ValueError(
                "Invalid value for `milk` ({0}), must be one of {1}"
                .format(milk, allowed_values)
            )

        self._milk = milk

    @property
    def status(self):
        """Gets the status of this Order.

        The status of your order  # noqa: E501

        :return: The status of this Order.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Order.

        The status of your order  # noqa: E501

        :param status: The status of this Order.
        :type status: str
        """
        allowed_values = ["placed", "making", "made", "delivered"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
