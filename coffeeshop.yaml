openapi: 3.0.0
servers:
  - url: 'http://localhost:8080/v3'
    description: Example API Service running locally
info:
  title: Simple Coffee Shop API
  description: An API to interact with a Coffee Shop
  version: 1.0.0
tags:
  - name: store
    description: Access point to Coffee Shop Orders

paths:
  /store/orders:
    post:
      tags:
        - store
      summary: Submit a new order for a coffee. 
      description: Submit a coffee order and choose your drink type, whether or not you would like milk, your drink temperature, and size.
      operationId: addOrder
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
      parameters:
        - name: name
          in: query
          description: The name of type of coffee you want to order.
          required: true
          schema:
            type: string
            enum:
              - latte
              - espresso
              - drip coffee
        - name: size
          in: query
          description: The size of coffee you want to order.
          schema: 
            type: string
            enum:
              - small
              - medium
              - large
            default: medium
        - name: temperature
          in: query
          description: The temperature of coffee you want to order.
          schema:
            type: string
            enum:
              - hot
              - cold
            default: hot
        - name: milk
          in: query
          description: The type of milk you want to order.
          schema:
            type: string
            enum:
              - noMilk
              - whole
              - oat
              - soy
            default: noMilk
    get:
      tags:
        - store
      summary: Retrieve all records of coffee orders from the store.
      description: Returns a list of json schema where each one describes a coffee order stored within the database.
      operationId: getOrders
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'


  /store/orders/status:
    get:
      tags:
        - store
      summary: Finds orders by status
      description: Returns a list of json schema filtered by status where each returned schema describes a coffee order stored within the database.
      operationId: findOrdersByStatus
      parameters:
        - name: status
          in: query
          description: A state that a coffee order can be in as it is fufilled
          required: true
          style: form
          explode: false
          deprecated: false
          schema:
            type: string
            enum:
              - placed
              - making
              - made
              - delivered
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
  '/store/orders/{orderId}':
    get:
      tags:
        - store
      summary: Find order by ID
      description: Returns all information regarding a single order.
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          description: ID of order to return all information on.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: ID not found in database
    patch:
      tags:
        - store
      summary: Updates the status of an individual order.
      description: Change the status of a single order in the store. The order must be identified by its ID.
      operationId: updateOrder
      parameters:
        - name: orderId
          in: path
          description: ID of order to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: status
          in: query
          description: new status to update order to
          required: true
          schema:
            type: string
            enum:
              - placed
              - making
              - made
              - delivered
      responses:
        '200':
          description: Successful update
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '404':
          description: ID not found in database
    delete:
      tags:
        - store
      summary: Deletes a record of an order.
      description: Deletes order record from database. The order must be identified by its ID.
      operationId: deleteOrder
      parameters:
        - name: orderId
          in: path
          description: ID of order to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful deletion
          content:
            application/xml:
              schema:
                type: string
        '404':
          description: ID not found in database
  '/store/orders/{orderId}/nametype/{name}':
    patch:
      tags:
        - store
      summary: Updates the coffee type in the order
      description: Changes the type of a coffee ordered. The order must be identified by its ID.
      operationId: updateOrderCoffee
      parameters:
        - name: orderId
          in: path
          description: ID of order whose type needs to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: name
          in: path
          description: new coffee type to update order to
          required: true
          schema:
            type: string
            enum:
              - latte
              - espresso
              - drip coffee
      responses:
        '200':
          description: Successful update
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '404':
          description: ID not found in database
          
  '/store/orders/{orderId}/milktype/{milk}':
    patch:
      tags:
        - store
      summary: Updates the milk type in the order
      description: 'Change the type of milk ordered. The order must be identified by its ID.'
      operationId: updateOrderMilk
      parameters:
        - name: orderId
          in: path
          description: ID of order that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: milk
          in: path
          description: new milk type to update order to
          required: true
          schema:
            type: string
            enum:
              - noMilk
              - whole
              - oat
              - soy
      responses:
        '200':
          description: Successful update
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '404':
          description: ID not found in database

  '/store/orders/{orderId}/temptype/{temperature}':
    patch:
      tags:
        - store
      summary: Updates the temperature of the order
      description: 'Change the temperature of the order. The order must be identified by its ID.'
      operationId: updateOrderTemp
      parameters:
        - name: orderId
          in: path
          description: ID of order that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: temperature
          in: path
          description: new temperature to update order to
          required: true
          schema:
            type: string
            enum:
              - hot
              - cold
      responses:
        '200':
          description: Successful update
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '404':
          description: ID not found in database

  '/store/orders/{orderId}/sizetype/{size}':
    patch:
      tags:
        - store
      summary: Updates the size of the drink ordered
      description: 'Change the size of the order. The order must be identified by its ID.'
      operationId: updateOrderSize
      parameters:
        - name: orderId
          in: path
          description: ID of order that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: size
          in: path
          description: new size to update order to
          required: true
          schema:
            type: string
            enum:
              - small
              - medium
              - large
      responses:
        '200':
          description: Successful update
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '404':
          description: ID not found in database


components:
  schemas:
    Order:
      title: Coffeeshop Coffee Order
      description: A coffee order from the coffee shop. Describes exactly one drink.
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: A unique ID number that identifies this specific coffee order.
        name:
          description: The name of type of coffee you want to order.
          type: string
          enum:
            - latte
            - espresso
            - drip coffee
        size:
          description: The size of coffee you want to order.
          type: string
          enum:
            - small
            - medium
            - large
        temperature:
          description: The temperature of coffee you want to order.
          type: string
          enum:
            - hot
            - cold
        milk:
          description: The type of milk you want to order.
          type: string
          enum:
            - noMilk
            - whole
            - oat
            - soy
        status:
          description: The status of your order
          type: string
          enum:
            - placed
            - making
            - made
            - delivered
      xml:
        name: Order

    