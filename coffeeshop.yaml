openapi: 3.0.0
servers:
  - url: 'http://localhost:8080/v3'
    description: Example API Service running locally
info:
  title: Simple Coffee Shop API
  description: An API to interact with a Coffee Shop
  version: 1.0.0
tags:
  - name: store
    description: Access point to Coffee Shop Orders

paths:
  /store/order:
    post:
      tags:
        - store
      summary: Submit a new order
      description: ''
      operationId: addOrder
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '405':
          description: Invalid input
      parameters:
        - name: name
          in: query
          description: The name of the type of coffee to order.
          required: true
          schema:
            type: string
            enum:
              - latte
              - espresso
              - drip coffee
        - name: size
          in: query
          description: Drink size.
          schema: 
            type: string
            enum:
              - small
              - medium
              - large
            default: medium
        - name: temperature
          in: query
          description: Temperature of the drink.
          schema:
            type: string
            enum:
              - hot
              - cold
            default: hot
        - name: milk
          in: query
          description: Type of milk added to the drink.
          schema:
            type: string
            enum:
              - noMilk
              - whole
              - oat
              - soy
            default: noMilk
    get:
      tags:
        - store
      summary: Retrieve all records of coffee orders from the store.
      description: ''
      operationId: getOrders
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'


  /store/order/findByStatus:
    get:
      tags:
        - store
      summary: Finds Orders by status
      description: ''
      operationId: findOrdersByStatus
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: true
          style: form
          explode: false
          deprecated: false
          schema:
            type: string
            enum:
              - placed
              - making
              - made
              - delivered
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '400':
          description: Invalid status value
  '/store/order/{orderId}':
    get:
      tags:
        - store
      summary: Find order by ID
      description: Returns all information on a single order.
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          description: ID of order to return all information on.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
    patch:
      tags:
        - store
      summary: Updates a order in the store
      description: 'Change the status of an order in the store. The order must be identified by its ID.'
      operationId: updateOrder
      parameters:
        - name: orderId
          in: path
          description: ID of order that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: status
          in: query
          description: status order that needs to be updated
          required: true
          schema:
            type: string
            enum:
              - placed
              - making
              - made
              - delivered
      responses:
        '200':
          description: Successful update
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '405':
          description: Invalid input
    delete:
      tags:
        - store
      summary: Deletes a record of an order.
      description: 'Deletes a record of an order.'
      operationId: deleteOrder
      parameters:
        - name: orderId
          in: path
          description: Order id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful deletion
          content:
            application/xml:
              schema:
                type: string
        '400':
          description: Invalid order value


components:
  schemas:
    Order:
      title: Coffeeshop Coffee Order
      description: A coffee order from the coffee shop. Describes exactly one drink.
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: A unique ID number that identifies this specific coffee order.
        name:
          description: The name of the type of coffee to order.
          type: string
          enum:
            - latte
            - espresso
            - drip coffee
        size:
          description: Drink size.
          type: string
          enum:
            - small
            - medium
            - large
        temperature:
          description: Temperature of the drink.
          type: string
          enum:
            - hot
            - cold
        milk:
          description: Type of milk added to the drink.
          type: string
          enum:
            - noMilk
            - whole
            - oat
            - soy
        status:
          description: Order Status
          type: string
          enum:
            - placed
            - making
            - made
            - delivered
      xml:
        name: Order

    